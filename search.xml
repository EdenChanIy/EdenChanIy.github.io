<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java集合框架的理解</title>
      <link href="/2018/07/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/07/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">常用集合框架</span><br><span class="line">└── Iterator接口</span><br><span class="line">    ├── Collection接口</span><br><span class="line">        ├── List接口</span><br><span class="line">            ├── LinkedList类</span><br><span class="line">            ├── ArrayList类</span><br><span class="line">            └── Vector类</span><br><span class="line">            └── Stack类</span><br><span class="line">        └──Set接口</span><br><span class="line">            ├── HashSet类</span><br><span class="line">            └── TreeSet类</span><br><span class="line">    └── Map接口</span><br><span class="line">        ├── TreeMap类</span><br><span class="line">        ├── HashMap类 ──── ConcurrentMap类</span><br><span class="line">    └── HashTable类</span><br></pre></td></tr></table></figure><p>##Iterator<br>Iterator提供iterator方法用于遍历集合元素，提供了对当前集合的三种操作：判断集合中是否有下一个元素，获取下一个元素以及移除当前元素</p><ul><li>fail-fast机制（快速失败机制）：在实现了Iterator接口的集合类中，都会实现一种fail-fast机制，其目的是让集合在并发操作时，如果一个线程对集合类实例进行了结构性修改（remove，add，clear等操作），另一个线程在迭代时出现错误能够立即抛出异常。其实现原理是通过定义一个modCount变量记录当前集合被操作的次数，然后在每次使用itr对集合进行操作的时候调用checkForComodification方法比较expectedModCount和modCount的值是否相等，不相等的话就代表出现了脏数据，这个时候就会抛出ConcurrentModificationException错误</li></ul><p>##Collection</p><ul><li>Collection接口继承了Iterator接口，在此基础上添加了一些方法，如返回集合大小，判断集合是否为空，在集合中添加元素等等</li></ul><p>###Vector</p><ul><li>Vector类是可以动态增长和收缩的存储对象。Vector类继承了AbstractList类并且实现了List接口，支持随机访问，可以被克隆和序列化<ul><li>底层数据结构为数组，支持随机访问，可以动态扩展</li><li>查询复杂度O(1)，添加和删除的复杂度O(n)</li><li>默认容量大小为10，默认扩容大小为原来的2倍</li><li>线程安全，使用synchronized关键字来实现</li></ul></li></ul><p>###Stack</p><ul><li>Stack类继承了Vector类，但是对元素的访问和插入做了一定限制，只能在数组尾部添加或删除元素，这体现了一个后进先出（LIFO）的特性</li></ul><p>###ArrayList</p><ul><li>ArrayList类和Vector类的构造和功能相似<ul><li>底层数据结构为数组，支持随机访问，可以动态扩展</li><li>查询复杂度O(1)，添加和删除的复杂度O(n)</li><li>默认容量大小为10，默认扩容大小为原来的1.5倍</li><li>线程不安全</li></ul></li><li>ArrayList和Vector的异同<ul><li>底层数据结构相同</li><li>默认容量相同</li><li>扩容机制不同</li><li>前者线程不安全，后者线程安全</li></ul></li></ul><p>###LinkedList</p><ul><li>LinkedList是继承了AbstractSequentialList的双向链表并且实现了Deque接口，可以被当作堆栈、队列或双向队列进行处理，可以被克隆和序列化<ul><li>底层数据结构为双向链表，不支持高效的随机访问，可以动态扩展</li><li>查询复杂度O(n^2)，查找时分两半查找，添加和删除的复杂度O(1)</li><li>默认容量为0</li><li>线程不安全</li></ul></li></ul><p>###Hashtable</p><ul><li>Hashtable类是一个key-value映射的哈希表，实现Map接口，继承Directionary类，可被克隆和序列化<ul><li>底层数据结构为单链表数组（Entry[]数组），每个数组元素中的单链表存放的是键值对（Entry对象）</li><li>查找，添加和删除复杂度O(1)（理想状态下）</li><li>默认容量大小为11，默认负载因子为0.75（到达负载因子对应的容量时进行扩容），默认扩容大小为原来的2倍加1</li><li>使用拉链法解决哈希冲突（即在两个元素的哈希值相等的情况下将两个元素放在同一个位置的链表中）</li><li>不能接受null键值和值</li><li>线程安全</li></ul></li></ul><p>###HashMap</p><ul><li>与Hashtable相似是一个key-value映射的散列表，继承AbstractMap类，实现了Map接口，可被克隆和序列化<ul><li>底层数据结构为单链表数组或红黑树数组</li><li>查找，添加和删除复杂度O(1)（理想状态下）</li><li>默认容量大小为16，默认负载因子为0.75，默认扩容大小为原来的2倍<ul><li>为什么要扩容为原来的2倍？因为HashMap关注中hash的计算效率问题，在取模计算时，如果模数是2的幂，那么可以直接使用位运算来得到结果，效率要高于除法。不过这会导致哈希分布不均匀的问题</li></ul></li><li>当单个桶（单链表数组中每一个数组位置称为一个桶）大小大于8并且当前集合中键值对总数量大于64的时候，就会将数组位置中的单链表转换成红黑树（特点是查询时间缩短为O(logn)）<ul><li>单链表是如何转换成红黑树的？使用哈希值作为树的分支变量，如果两个哈希值不等，但指向同一个桶的话，较大的那个会插入到右子树里。如果哈希值相等，HashMap希望key值最好是实现了Comparable接口的，这样它可以按照顺序进行插入</li></ul></li><li>查询或者是插入的过程是先对比hashCode方法得出的hash值（根据键值对计算出来的哈希值）是否相等，相等的情况下再调用equals方法（直接对比两个对象中的值）进行对比，两者都相等的时候才说明这两个对象相等</li><li>线程不安全<ul><li>多线程下出现的问题？在多线程情况下重新调整HashMap中个元素的值的时候会存在条件竞争的问题，会出现死循环。所以多线程环境下不建议使用HashMap，可以转而使用ConcurrentHashMap</li></ul></li><li>常使用String，Integer等包装类作为键<ul><li>为什么包装类适合作为键？因为放入Map中的对象要保证遵守equals和hashCode方法的定义规则，并且要保证对象存取过程中hash值不会变；而String等包装类是不可变的，使用final修饰，其内存地址始终指向于同一块地址</li></ul></li></ul></li><li>在JDK1.8后对HashMap的改进有以下几处：<ul><li>使用红黑树进行扩展</li><li>hashCode值的扰动函数减少运算次数</li><li>扩容为之从重新调用hash函数计算新的位置变为通过(e.hash&amp;oldCapicity)==0来确定节点新位置是位于扩容前的角标还是之前的2倍角标位置</li></ul></li></ul><p>###HashMap和Hashtable的区别</p><ul><li>继承的父类不同：HashMap继承AbstractMap类，而Hashtable继承Dictionary类</li><li>对null键值支持不同，HashMap支持null键和null值，Hashtable不支持</li><li>HashMap线程不安全，Hashtable线程安全</li><li>初始容量大小和每次扩容大小不同，HashMap默认大小是16，每次扩容容量变为16或是链表转化为红黑树；Hashtable默认大小是11，每次扩容，容量变为原来的2n+1</li><li>计算hash值的方法不同，Hashtable直接使用对象的hashCode，hashCode是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值，然后再使用除留余数法来获取最终位置；因为HashMap扩容使用2倍会导致哈希分布不均匀的问题，所以HashMap会使用使用一些简单的位处理减少哈希冲突</li></ul><p>###ConcurrentHashMap</p><ul><li>由一个个Segment组成，Segment也被称为分段锁。所以ConcurrentHashMap实际上是一个Segment数组，Segment通过继承ReentrantLock来进行加锁，保证了每个Segment是线程安全的，从而实现全局的线程安全。ConcurrentHashMap中有一个concurrencyLevel变量，默认为16，就是说ConcurrentHashMap默认有16个Segment，而每一个Segment中有类似HashMap结构的单链表数组，只不过在这基础上实现了线程安全</li></ul><p>###TreeMap</p><ul><li>TreeMap的内部基于红黑树实现的，线程不安全</li></ul><p>###Set</p><ul><li>Set类整体依赖于Map类，即HashSet使用一个HashMap的实例实现，而TreeSet使用一个TreeMap实例实现</li><li>HashSet和HashMap的区别<ul><li>实现的接口不同，HashSet实现Set接口，HashMap实现Map接口</li><li>HashSet仅存储值，HashMap存储键值对</li><li>增加元素使用的方法名不同，HashSet使用add方法，HashMap使用put方法</li><li>计算hashcode的对象不同，HashSet使用成员对象，HashMap使用键对象</li></ul></li><li>TreeSet是一个有序集合，它的作用是提供有序的Set集合。继承AbstractSet类，实现了NavagableSet接口，可以被克隆和序列化，支持一系列的导航方法（查找与指定目标最匹配值等）<ul><li>TreeSet支持两种排序方式：自然排序和Comparator排序<ul><li>自然排序（元素具备比较性）：让元素所属的类实现Comparable接口</li><li>比较器排序（集合具备比较性）：让集合接受一个Comparator的实现类对象</li></ul></li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue使用axios和qs完成向后台发出post请求</title>
      <link href="/2018/06/19/vue%E4%BD%BF%E7%94%A8axios%E5%92%8Cqs%E5%AE%8C%E6%88%90%E5%90%91%E5%90%8E%E5%8F%B0%E5%8F%91%E5%87%BApost%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/06/19/vue%E4%BD%BF%E7%94%A8axios%E5%92%8Cqs%E5%AE%8C%E6%88%90%E5%90%91%E5%90%8E%E5%8F%B0%E5%8F%91%E5%87%BApost%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<blockquote><p>Vue.js使用axios向后台发出post请求和获取数据一样，可以直接调用函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在需要交互的.vue文件中添加引用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后在methods使用post方法发出请求</span></span><br><span class="line">methods: &#123;</span><br><span class="line">       postData()&#123;</span><br><span class="line">           axios.post(<span class="string">'url'</span>, &#123;</span><br><span class="line">               id: <span class="string">'1'</span>,</span><br><span class="line">               name: <span class="string">'user1'</span></span><br><span class="line">           &#125;).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="comment">//do something with the response</span></span><br><span class="line">           &#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(error);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是有时候使用这种方法后台有可能接收不到数据，因为数据没有序列化，所以这个时候可以使用qs插件地址库对数据进行编码，将axios发送的数据格式转换为form-data格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装axios的时候会默认安装qs</span></span><br><span class="line"><span class="comment">//在需要交互的.vue文件中添加引用</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后在methods使用post方法发出请求</span></span><br><span class="line">methods: &#123;</span><br><span class="line">       postData()&#123;</span><br><span class="line">       <span class="keyword">var</span> data = qs.stringify(&#123;</span><br><span class="line">               id: <span class="string">'1'</span>,</span><br><span class="line">               name: <span class="string">'user1'</span></span><br><span class="line">       &#125;);</span><br><span class="line">           axios.post(<span class="string">'url'</span>, data&#125;).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="comment">//do something with the response</span></span><br><span class="line">           &#125;).catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(error);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue使用axios获取后台数据</title>
      <link href="/2018/06/18/vue%E4%BD%BF%E7%94%A8axios%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/06/18/vue%E4%BD%BF%E7%94%A8axios%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>在使用Vue.js进行前端开发的时候，有时候需要从后台获取数据，在这里我是用的是axios的方法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在需要交互的.vue文件中添加引用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然后在methods中使用get方法对数据进行获取</span></span><br><span class="line">methods: &#123;</span><br><span class="line">getData()&#123;</span><br><span class="line">axios.get(<span class="string">'url'</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//do something with the response</span></span><br><span class="line">               &#125;).catch(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(response);</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>test</title>
      <link href="/2018/06/14/README/"/>
      <url>/2018/06/14/README/</url>
      <content type="html"><![CDATA[<h2 id="当前版本：v0-0-1"><a href="#当前版本：v0-0-1" class="headerlink" title="当前版本：v0.0.1"></a>当前版本：v0.0.1</h2><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>SpringMVC,Spring,Mybatis,Maven(SSM+Maven)</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── src/main    主目录</span><br><span class="line">    ├── java    java文件</span><br><span class="line">        └── cn/zd/smart  samrt项目</span><br><span class="line">            ├── common      公共模块</span><br><span class="line">            ├── controller  控制模块</span><br><span class="line">            ├── dao         数据访问模块</span><br><span class="line">            ├── entity      实体类</span><br><span class="line">            ├── interceptor 拦截器</span><br><span class="line">            ├── service     逻辑层</span><br><span class="line">            └── WebSocket   WebSocket模块</span><br><span class="line">    ├── resource    资源目录</span><br><span class="line">        ├── mapper      Mybatis映射文件目录</span><br><span class="line">        ├── spring      spring配置文件目录</span><br><span class="line">        └── 其他配置文件</span><br><span class="line">    └── webapp      web目录</span><br><span class="line">└── pom.xml     Maven依赖配置</span><br></pre></td></tr></table></figure><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Copyright (c) 2018-present, 国家数字家庭工程技术研究中心</p><p>##Iterator<br>Iterator提供iterator方法用于遍历集合元素，提供了对当前集合的三种操作：判断集合中是否有下一个元素，获取下一个元素以及移除当前元素</p><ul><li>fail-fast机制（快速失败机制）：在实现了Iterator接口的集合类中，都会实现一种fail-fast机制，其目的是让集合在并发操作时，如果一个线程对集合类实例进行了结构性修改（remove，add，clear等操作），另一个线程在迭代时出现错误能够立即抛出异常。其实现原理是通过定义一个modCount变量记录当前集合被操作的次数，然后在每次使用itr对集合进行操作的时候调用checkForComodification方法比较expectedModCount和modCount的值是否相等，不相等的话就代表出现了脏数据，这个时候就会抛出ConcurrentModificationException错误</li></ul><p>##Collection</p><ul><li>Collection接口继承了Iterator接口，在此基础上添加了一些方法，如返回集合大小，判断集合是否为空，在集合中添加元素等等</li></ul><p>###Vector</p><ul><li>Vector类是可以动态增长和收缩的存储对象。Vector类继承了AbstractList类并且实现了List接口，支持随机访问，可以被克隆和序列化<ul><li>底层数据结构为数组，支持随机访问，可以动态扩展</li><li>查询复杂度O(1)，添加和删除的复杂度O(n)</li><li>默认容量大小为10，默认扩容大小为原来的2倍</li><li>线程安全，使用synchronized关键字来实现</li></ul></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Welcome</title>
      <link href="/2018/06/14/Welcome/"/>
      <url>/2018/06/14/Welcome/</url>
      <content type="html"><![CDATA[<p>欢迎来到我的博客，这里将会分享一些我日常遇到的问题或是趣事</p>]]></content>
      
      
    </entry>
    
  
  
</search>
